# Creation of dataset for machine learning analysis of microbial flow cytometry data #

directory <- "Raw FCS Files"
library(plyr)
library(reshape)
library(flowCore)
library(MASS)
library(h2o)
library(ggplot2)


if(file.exists("fset.RData")) {
  load("fset.RData")
} else {
  fset <- read.flowSet(path=directory, pattern="*.fcs")
  save(fset, file="fset.RData")
}

parse_name <- function(name) {
  csource <- substr(name, 3,6)
  day <- substr(name, 8,8)
  rep <- substr(name, 10,10)
  c(csource, day, rep, name)
}

if(!file.exists("samples.csv")) {
  samples <- sampleNames(fset)
  
  
  sample_table <- ldply(samples, parse_name)
  names(sample_table) <- c("csource", "day", "rep", "name")  
  write.csv(sample_table, "samples.csv", row.names=FALSE)
} else {
  sample_table <- read.csv("samples.csv")
}


#if(!file.exists("ValidationSet.RData")) {
  split_flow_frame <- function(ff) {
    ## take a flow frame, extract the relevant columns, and 
    ## return it as a dataframe of 10 observations, each having 
    ## 1000 points of 3 readings each. 
    dat <- log(exprs(ff)[,c("FSC-A", "SSC-A", "AmCyan-A")])
    dat <- data.frame(dat)
    dat$mod <- 1:nrow(dat) %% 100
    
    split <- ddply(dat, .(mod), function(d) {
      c(d$'FSC.A', d$'SSC.A', d$'AmCyan.A')
    })
    
    split
  }
  

  bigset <- fsApply(fset, function(ff) {
    split <- split_flow_frame(ff) 
    split <- subset(split, select=-c(mod)) ## drop that column
    split$label <- parse_name(identifier(ff))[1]
    split$labelT <- paste0(parse_name(identifier(ff))[1], parse_name(identifier(ff))[2])
    split
  })
  
  bigset <- ldply(bigset, function(d) {d})
  bigset <- bigset[, !(names(bigset) %in% c(".id"))]
  
  datasplitter <- 1:nrow(bigset) # total number of rows .
  datasplitter <- datasplitter %% 4; 
  
  training_set <- bigset[which(datasplitter %in% c(0,1)),] ## Training set
  validation_set <- bigset[which(datasplitter %in% c(2)),]
  test_set <- bigset[which(datasplitter %in% c(3)),]
  
  write.csv(training_set, file="trainingset.csv", row.names=F)
  write.csv(validation_set, file="validationset.csv", row.names=F)
  write.csv(test_set, file="testset.csv", row.names=F)
  save(training_set, file="TrainingSet.RData")
  save(validation_set, file="ValidationSet.RData")
  save(test_set, file="TestingSet.RData")
#}
