library(plsdepot)
pls_arisa= read.table(file.choose(), header = TRUE, sep=",")
head(pls_arisa)
names(pls_arisa)
# putting the variable biogas (column 2) at the end
# putting the variable biogas (column 2) at the end
bgprm=pls_arisa[,c(1, 3:2401,2)]
pls1=plsreg1(bgprm[,3:2401], bgprm[, 2, drop=TRUE], comps=2, crosval = TRUE)
plot(pls1)
# Plotting each observation predicted versus actual
plot(pls_arisa$Biogas, pls1$y.pred, type = "n", xlab="Original",ylab="Predicted")
head(bgprm)
head(bgprm[,1:5])
head(pls1)
bgprm[,2, drop=TRUE]
bgprm[,2]
head(bgprm[,1:5])
head(bgprm[,2398:240])
head(bgprm[,2398:2401])
pls1=plsreg1(bgprm[,2:2400], bgprm[, 2401], comps=2, crosval = TRUE)
text(cars$price, pls1$y.pred, col="#5592e3")
plot(pls1)
head(pls1)
names(pls1)
pls1$y.scores
bgprm[2401]
bgprm[,2401]
library(MASS)
library(pls)
install.packages("pls")
library(pls)
summary(plsr(Biogas ~. data = bgprm[,2:2401]))
summary(plsr(Biogas ~., data = bgprm[,2:2401]))
summary(plsreg <- plsr(Biogas ~., data = bgprm[,2:2401]))
plot(plsreg)
plsreg
names(plsreg)
coef(plsreg)
head(coef(plsreg))
names(plsreg)
plsreg$loadings
head(plsreg$loadings)
nrow(bgprm)
library(h2o)
h2o.init()
??h2o
h2o.clearLog()
h2o.getVersion()
h2o.init()
remove.packages("h2o", lib="~/R/win-library/3.2")
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download, install and initialize the H2O package for R.
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-noether/4/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
demo(h2o.glm)
^
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download, install and initialize the H2O package for R.
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-noether/4/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
demo(h2o.glm)
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download, install and initialize the H2O package for R.
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-noether/4/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
demo(h2o.glm)
if {}
if{
if(!file.exists("ValidationSet.RData")) {
split_flow_frame <- function(ff) {
## take a flow frame, extract the relevant columns, and
## return it as a dataframe of 10 observations, each having
# 1000 points of 3 readings each.
dat <- log(exprs(ff)[,c("FSC-A", "SSC-A", "AmCyan-A")])
dat <- data.frame(dat)
dat$mod <- 1:nrow(dat) %% 100
m1
require(graphics)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
group
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)
ctl
trl
trl
trt
weight
is.vector(ctl)
is.vector(trl)
is.vector(trt)
is.vector(weight)
is.vector(group)
class(group)
is.factor(group)
source("https://bioconductor.org/biocLite.R")
biocLite("flowFP")
library(flowFP)
source("https://bioconductor.org/biocLite.R")
biocLite("flowFP")
source("https://bioconductor.org/biocLite.R")
biocLite("flowFP")
library(flowFP)
library("flowCore", lib.loc="~/R/win-library/3.2")
library("flowFP", lib.loc="~/R/win-library/3.2")
library("flowViz", lib.loc="~/R/win-library/3.2")
source("http://bioconductor.org/biocLite.R")
biocLite("flowFP")
library(flowFP)
source("https://bioconductor.org/biocLite.R")
biocLite("flowCore")
library(flowCore)
library(flowFP)
setwd("C:/Users/admin/Desktop/NP_Machine Learnig Files/TIO2")
load("C:/Users/admin/Desktop/NP_Machine Learnig Files/TIO2/fset.RData")
mod <- flowFPModel(fset, name="FSC/SSC Model", parameters=c(1,4), nRecursions=7)
show(mod)
plot(mod)
fset
mod <- flowFPModel(fset, name="FSC/SSC Model", parameters=c(1,2), nRecursions=7)
show(mod)
plot(mod)
fp <- flowFP (fset, mod)
plot(fp, type="stack")
p <- flowFP (fs1, param=c("SS Log", "FL3 Log"), nRecursions=8)
p <- flowFP (fset, param=c("FSC-A", "SSC-A"), nRecursions=8)
plex <- flowFPPlex()
for (levels in 8:5) {
nRecursions(fp) <- levels
plex <- append (plex, fp)
}
p <- flowFP (fset, param=c("FSC-A", "SSC-A"), nRecursions=7)
plex <- flowFPPlex()
for (levels in 7:5) {
nRecursions(fp) <- levels
plex <- append (plex, fp)
}
plot (plex, type="tangle", transformation="norm")
fp1 <- flowFP (fset, parameters=c("FSC-A", "SSC-A"), name="self model: fs1", nRecursions=7)
plot (fp1, type="qc", main="Gate QC for Sample fs1")
fp <- flowFP (fset, parameters=c("FSC-A","SSC-A","AmCyan-A"), nRecursions=5)
plot (fp, type=✬plate✬)
plot (fp, type='plate')
nRecursions(fset)
nRecursions(fp)
counts(fp)
sampleNames(fp)
sampleClasses(fp)
parameters(fp)
tags(fp)
binBoundary(fp)
counts(fp)
fp <- flowFP (fset, parameters=c("FSC-A","SSC-A","AmCyan-A"), nRecursions=7)
counts(fp)
plot (fp, type='plate')
binBoundary(fp)
plot(fp)
plot(count(fp))
a=count(fp)
a=counts(fp)
plot(a)
fp <- flowFP (fset, parameters=c("FSC-A","SSC-A","AmCyan-A"), nRecursions=5)
a=counts(fp)
plota(a)
plot(a)
matrix(a)
counts(fp)
